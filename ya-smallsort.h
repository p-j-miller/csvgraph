/* ya_smallsort.h - this is part of yasort and yamedian */
/* warnings
		- uses define Z (undefines it at the end)
		- assumes elem_type_ss and cswap() [eswap2 for small_sort2()]  are already defined 
*/		   
#ifndef __YA_SMALLSORT_H
 #define __YA_SMALLSORT_H

#ifdef Z
 #error "Error macro Z already defined!"
#endif
/*  small_sort() - used for small arrays
*/
/*  optimal sorts for small array sizes will sort a max size of array of 32 ! */
/*  This is a little faster than using an optimised insertion sort (~ 1.4%) using the test program */
/*  small_sort2() is ~ 6% faster than using an insertion sort based on its test program */
#ifdef _SORT2 /* 2 array version required */
static void small_sort2( elem_type_ss *x, elem_type_ss *y,const size_t n)
 {
 #define Z(i,j) if(x[i] > x[j]) eswap2(i,j,x,y)
#else /* single array version */
static void small_sort( elem_type_ss *x, const size_t n)
 {
 #define Z(i,j) if(x[i] > x[j]) cswap(x[i],x[j])
 // #define Z(i,j) if(x[i] > x[j]) eswap(i,j,x)
#endif	 
  assert(n<=32);
  switch(n)
   {// use optimal sorts for small sizes (2 to 32), each optimal sort terminates in a return statement
	case 2:
	 {  /* Two elements only - can trivially sort these */
	  Z(0,1);
	  return ;
	 }	 
	case 3:
	 {  /* Three elements only - can sort these inline from "Programming classics" page 162 section 6.1.2 Sort-3 */
		Z(0,1);   // X1, X2
		Z(0,2);     // X1, X3
		Z(1,2);   // X2,X3
	  return ;
	 }
	case 4:
	 {  /* four elements only - can sort these inline from "Programming classics" page 162 section 6.1.2 Sort-4 */
		Z(0,1);   // X1, X2
		Z(2,3);     // X3, X4
		Z(0,2);     // X1, X3
		Z(1,3);   // X2,X4
		Z(1,2);   // X2,X3
	  return ;
	 }
	case 5:
	{ /* five elements only - can sort these inline from "Programming classics" page 162 section 6.1.2 Sort-5 */
	  /* sort3(X1,X2,X3) */
		Z(0,1);   // X1, X2
		Z(0,2);     // X1, X3
		Z(1,2);   // X2,X3
	  // calls to sort(2)
		Z(3,4);   // X4, X5
		Z(0,3);   // X1 , X4
		Z(2,3);   // X3, X4
		Z(1,4);   // X2, X5
		Z(1,2);   // X2, X3
		Z(3,4);   // X4, X5
	  return;
	}
	case 6:
	{ /* six elements only - can sort these inline from "Programming classics" page 162 section 6.1.2 Sort-6 */
	  /* sort3(X1,X2,X3) */
		Z(0,1);   // X1, X2
		Z(0,2);     // X1, X3
		Z(1,2);   // X2,X3
	  /* sort3(X4,X5,X6) */
		Z(3,4);   // X4, X5
		Z(3,5);     // X4, X6
		Z(4,5);   // X5,X6
	  // calls to sort(2)
		Z(0,3);   // X1 , X4
		Z(2,5);   // X3, X6
		Z(2,3);   // X3, X4
		Z(1,4);   // X2, X5
		Z(1,2);   // X2, X3
		Z(3,4);   // X4, X5
	  return;
	}
	case 7: // sort7() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{ 	Z(0,6);Z(2,3);Z(4,5);
		Z(0,2);Z(1,4);Z(3,6);
		Z(0,1);Z(2,5);Z(3,4);
		Z(1,2);Z(4,6);
		Z(2,3);Z(4,5);
		Z(1,2);Z(3,4);Z(5,6);
	  return;
	}
	case 8: // sort8() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{ 	Z(0,2);Z(1,3);Z(4,6);Z(5,7);
		Z(0,4);Z(1,5);Z(2,6);Z(3,7);
		Z(0,1);Z(2,3);Z(4,5);Z(6,7);
		Z(2,4);Z(3,5);
		Z(1,4);Z(3,6);
		Z(1,2);Z(3,4);Z(5,6);
	  return;
	}
	case 9: // sort9() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{ 	Z(0,3);Z(1,7);Z(2,5);Z(4,8);
		Z(0,7);Z(2,4);Z(3,8);Z(5,6);
		Z(0,2);Z(1,3);Z(4,5);Z(7,8);
		Z(1,4);Z(3,6);Z(5,7);
		Z(0,1);Z(2,4);Z(3,5);Z(6,8);
		Z(2,3);Z(4,5);Z(6,7);
		Z(1,2);Z(3,4);Z(5,6);
	  return;
	}
	case 10: // sort10() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,8);Z(1,9);Z(2,7);Z(3,5);Z(4,6);
		Z(0,2);Z(1,4);Z(5,8);Z(7,9);
		Z(0,3);Z(2,4);Z(5,7);Z(6,9);
		Z(0,1);Z(3,6);Z(8,9);
		Z(1,5);Z(2,3);Z(4,8);Z(6,7);
		Z(1,2);Z(3,5);Z(4,6);Z(7,8);
		Z(2,3);Z(4,5);Z(6,7);
		Z(3,4);Z(5,6);
	  return;
	}
	case 11: // sort11() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{  	Z(0,9);Z(1,6);Z(2,4);Z(3,7);Z(5,8);
		Z(0,1);Z(3,5);Z(4,10);Z(6,9);Z(7,8);
		Z(1,3);Z(2,5);Z(4,7);Z(8,10);
		Z(0,4);Z(1,2);Z(3,7);Z(5,9);Z(6,8);
		Z(0,1);Z(2,6);Z(4,5);Z(7,8);Z(9,10);
		Z(2,4);Z(3,6);Z(5,7);Z(8,9);
		Z(1,2);Z(3,4);Z(5,6);Z(7,8);
		Z(2,3);Z(4,5);Z(6,7);
	  return;
	}
	case 12: // sort12() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,8);Z(1,7);Z(2,6);Z(3,11);Z(4,10);Z(5,9);
		Z(0,1);Z(2,5);Z(3,4);Z(6,9);Z(7,8);Z(10,11);
		Z(0,2);Z(1,6);Z(5,10);Z(9,11);
		Z(0,3);Z(1,2);Z(4,6);Z(5,7);Z(8,11);Z(9,10);
		Z(1,4);Z(3,5);Z(6,8);Z(7,10);
		Z(1,3);Z(2,5);Z(6,9);Z(8,10);
		Z(2,3);Z(4,5);Z(6,7);Z(8,9);
		Z(4,6);Z(5,7);
		Z(3,4);Z(5,6);Z(7,8);
	  return;
	}
	case 13: // sort13() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,12);Z(1,10);Z(2,9);Z(3,7);Z(5,11);Z(6,8);
		Z(1,6);Z(2,3);Z(4,11);Z(7,9);Z(8,10);
		Z(0,4);Z(1,2);Z(3,6);Z(7,8);Z(9,10);Z(11,12);
		Z(4,6);Z(5,9);Z(8,11);Z(10,12);
		Z(0,5);Z(3,8);Z(4,7);Z(6,11);Z(9,10);
		Z(0,1);Z(2,5);Z(6,9);Z(7,8);Z(10,11);
		Z(1,3);Z(2,4);Z(5,6);Z(9,10);
		Z(1,2);Z(3,4);Z(5,7);Z(6,8);
		Z(2,3);Z(4,5);Z(6,7);Z(8,9);
		Z(3,4);Z(5,6);
	  return;
	}
	case 14: // sort14() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,6);Z(1,11);Z(2,12);Z(3,10);Z(4,5);Z(7,13);Z(8,9);
		Z(1,2);Z(3,7);Z(4,8);Z(5,9);Z(6,10);Z(11,12);
		Z(0,4);Z(1,3);Z(5,6);Z(7,8);Z(9,13);Z(10,12);
		Z(0,1);Z(2,9);Z(3,7);Z(4,11);Z(6,10);Z(12,13);
		Z(2,5);Z(4,7);Z(6,9);Z(8,11);
		Z(1,2);Z(3,4);Z(6,7);Z(9,10);Z(11,12);
		Z(1,3);Z(2,4);Z(5,6);Z(7,8);Z(9,11);Z(10,12);
		Z(2,3);Z(4,7);Z(6,9);Z(10,11);
		Z(4,5);Z(6,7);Z(8,9);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);
	  return;
	}
	case 15: // sort15() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(1,2);Z(3,10);Z(4,14);Z(5,8);Z(6,13);Z(7,12);Z(9,11);
		Z(0,14);Z(1,5);Z(2,8);Z(3,7);Z(6,9);Z(10,12);Z(11,13);
		Z(0,7);Z(1,6);Z(2,9);Z(4,10);Z(5,11);Z(8,13);Z(12,14);
		Z(0,6);Z(2,4);Z(3,5);Z(7,11);Z(8,10);Z(9,12);Z(13,14);
		Z(0,3);Z(1,2);Z(4,7);Z(5,9);Z(6,8);Z(10,11);Z(12,13);
		Z(0,1);Z(2,3);Z(4,6);Z(7,9);Z(10,12);Z(11,13);
		Z(1,2);Z(3,5);Z(8,10);Z(11,12);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);
		Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(10,11);
		Z(5,6);Z(7,8);
	  return;
	}
	case 16: // sort16() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,13);Z(1,12);Z(2,15);Z(3,14);Z(4,8);Z(5,6);Z(7,11);Z(9,10);
		Z(0,5);Z(1,7);Z(2,9);Z(3,4);Z(6,13);Z(8,14);Z(10,15);Z(11,12);
		Z(0,1);Z(2,3);Z(4,5);Z(6,8);Z(7,9);Z(10,11);Z(12,13);Z(14,15);
		Z(0,2);Z(1,3);Z(4,10);Z(5,11);Z(6,7);Z(8,9);Z(12,14);Z(13,15);
		Z(1,2);Z(3,12);Z(4,6);Z(5,7);Z(8,10);Z(9,11);Z(13,14);
		Z(1,4);Z(2,6);Z(5,8);Z(7,10);Z(9,13);Z(11,14);
		Z(2,4);Z(3,6);Z(9,12);Z(11,13);
		Z(3,5);Z(6,8);Z(7,9);Z(10,12);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);
		Z(6,7);Z(8,9);
	  return;
	}
	case 17: // sort17() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,11);Z(1,15);Z(2,10);Z(3,5);Z(4,6);Z(8,12);Z(9,16);Z(13,14);
		Z(0,6);Z(1,13);Z(2,8);Z(4,14);Z(5,15);Z(7,11);
		Z(0,8);Z(3,7);Z(4,9);Z(6,16);Z(10,11);Z(12,14);
		Z(0,2);Z(1,4);Z(5,6);Z(7,13);Z(8,9);Z(10,12);Z(11,14);Z(15,16);
		Z(0,3);Z(2,5);Z(6,11);Z(7,10);Z(9,13);Z(12,15);Z(14,16);
		Z(0,1);Z(3,4);Z(5,10);Z(6,9);Z(7,8);Z(11,15);Z(13,14);
		Z(1,2);Z(3,7);Z(4,8);Z(6,12);Z(11,13);Z(14,15);
		Z(1,3);Z(2,7);Z(4,5);Z(9,11);Z(10,12);Z(13,14);
		Z(2,3);Z(4,6);Z(5,7);Z(8,10);
		Z(3,4);Z(6,8);Z(7,9);Z(10,12);
		Z(5,6);Z(7,8);Z(9,10);Z(11,12);
		Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);
	  return;
	}
	case 18: // sort18() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,1);Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);Z(16,17);
		Z(1,5);Z(2,6);Z(3,7);Z(4,10);Z(8,16);Z(9,17);Z(12,14);Z(13,15);
		Z(0,8);Z(1,10);Z(2,12);Z(3,14);Z(6,13);Z(7,15);Z(9,16);Z(11,17);
		Z(0,4);Z(1,9);Z(5,17);Z(8,11);Z(10,16);
		Z(0,2);Z(1,6);Z(4,10);Z(5,9);Z(14,16);Z(15,17);
		Z(1,2);Z(3,10);Z(4,12);Z(5,7);Z(6,14);Z(9,13);Z(15,16);
		Z(3,8);Z(5,12);Z(7,11);Z(9,10);
		Z(3,4);Z(6,8);Z(7,14);Z(9,12);Z(11,13);
		Z(1,3);Z(2,4);Z(7,9);Z(8,12);Z(11,15);Z(13,16);
		Z(2,3);Z(4,5);Z(6,7);Z(10,11);Z(12,14);Z(13,15);
		Z(4,6);Z(5,8);Z(9,10);Z(11,14);
		Z(3,4);Z(5,7);Z(8,9);Z(10,12);Z(13,14);
		Z(5,6);Z(7,8);Z(9,10);Z(11,12);
	  return;
	}
	case 19: // sort19() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,12);Z(1,4);Z(2,8);Z(3,5);Z(6,17);Z(7,11);Z(9,14);Z(10,13);Z(15,16);
		Z(0,2);Z(1,7);Z(3,6);Z(4,11);Z(5,17);Z(8,12);Z(10,15);Z(13,16);Z(14,18);
		Z(3,10);Z(4,14);Z(5,15);Z(6,13);Z(7,9);Z(11,17);Z(16,18);
		Z(0,7);Z(1,10);Z(4,6);Z(9,15);Z(11,16);Z(12,17);Z(13,14);
		Z(0,3);Z(2,6);Z(5,7);Z(8,11);Z(12,16);
		Z(1,8);Z(2,9);Z(3,4);Z(6,15);Z(7,13);Z(10,11);Z(12,18);
		Z(1,3);Z(2,5);Z(6,9);Z(7,12);Z(8,10);Z(11,14);Z(17,18);
		Z(0,1);Z(2,3);Z(4,8);Z(6,10);Z(9,12);Z(14,15);Z(16,17);
		Z(1,2);Z(5,8);Z(6,7);Z(9,11);Z(10,13);Z(14,16);Z(15,17);
		Z(3,6);Z(4,5);Z(7,9);Z(8,10);Z(11,12);Z(13,14);Z(15,16);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,13);Z(12,14);
		Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);
	  return;
	}
	case 20: // sort20() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,3);Z(1,7);Z(2,5);Z(4,8);Z(6,9);Z(10,13);Z(11,15);Z(12,18);Z(14,17);Z(16,19);
		Z(0,14);Z(1,11);Z(2,16);Z(3,17);Z(4,12);Z(5,19);Z(6,10);Z(7,15);Z(8,18);Z(9,13);
		Z(0,4);Z(1,2);Z(3,8);Z(5,7);Z(11,16);Z(12,14);Z(15,19);Z(17,18);
		Z(1,6);Z(2,12);Z(3,5);Z(4,11);Z(7,17);Z(8,15);Z(13,18);Z(14,16);
		Z(0,1);Z(2,6);Z(7,10);Z(9,12);Z(13,17);Z(18,19);
		Z(1,6);Z(5,9);Z(7,11);Z(8,12);Z(10,14);Z(13,18);
		Z(3,5);Z(4,7);Z(8,10);Z(9,11);Z(12,15);Z(14,16);
		Z(1,3);Z(2,4);Z(5,7);Z(6,10);Z(9,13);Z(12,14);Z(15,17);Z(16,18);
		Z(1,2);Z(3,4);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(15,16);Z(17,18);
		Z(2,3);Z(4,6);Z(5,8);Z(7,9);Z(10,12);Z(11,14);Z(13,15);Z(16,17);
		Z(4,5);Z(6,8);Z(7,10);Z(9,12);Z(11,13);Z(14,15);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);
	  return;
	}
	case 21: // sort21() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,7);Z(1,10);Z(3,5);Z(4,8);Z(6,13);Z(9,19);Z(11,14);Z(12,17);Z(15,16);Z(18,20);
		Z(0,11);Z(1,15);Z(2,12);Z(3,4);Z(5,8);Z(6,9);Z(7,14);Z(10,16);Z(13,19);Z(17,20);
		Z(0,6);Z(1,3);Z(2,18);Z(4,15);Z(5,10);Z(8,16);Z(11,17);Z(12,13);Z(14,20);
		Z(2,6);Z(5,12);Z(7,18);Z(8,14);Z(9,11);Z(10,17);Z(13,19);Z(16,20);
		Z(1,2);Z(4,7);Z(5,9);Z(6,17);Z(10,13);Z(11,12);Z(14,19);Z(15,18);
		Z(0,2);Z(3,6);Z(4,5);Z(7,10);Z(8,11);Z(9,15);Z(12,16);Z(13,18);Z(14,17);Z(19,20);
		Z(0,1);Z(2,3);Z(5,9);Z(6,12);Z(7,8);Z(11,14);Z(13,15);Z(16,19);Z(17,18);
		Z(1,2);Z(3,9);Z(6,13);Z(10,11);Z(12,15);Z(16,17);Z(18,19);
		Z(1,4);Z(2,5);Z(3,7);Z(6,10);Z(8,9);Z(11,12);Z(13,14);Z(17,18);
		Z(2,4);Z(5,6);Z(7,8);Z(9,11);Z(10,13);Z(12,15);Z(14,16);
		Z(3,4);Z(5,7);Z(6,8);Z(9,10);Z(11,13);Z(12,14);Z(15,16);
		Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);Z(16,17);
	  return;
	}
	case 22: // sort22() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,1);Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);Z(16,17);Z(18,19);Z(20,21);
		Z(0,12);Z(1,13);Z(2,6);Z(3,7);Z(4,10);Z(8,20);Z(9,21);Z(11,17);Z(14,18);Z(15,19);
		Z(0,2);Z(1,6);Z(3,12);Z(4,16);Z(5,17);Z(7,13);Z(8,14);Z(9,18);Z(15,20);Z(19,21);
		Z(0,8);Z(1,15);Z(2,14);Z(3,9);Z(5,11);Z(6,20);Z(7,19);Z(10,16);Z(12,18);Z(13,21);
		Z(0,4);Z(1,10);Z(3,8);Z(5,9);Z(7,14);Z(11,20);Z(12,16);Z(13,18);Z(17,21);
		Z(1,3);Z(2,5);Z(4,8);Z(6,9);Z(7,10);Z(11,14);Z(12,15);Z(13,17);Z(16,19);Z(18,20);
		Z(2,4);Z(3,12);Z(5,8);Z(6,11);Z(9,18);Z(10,15);Z(13,16);Z(17,19);
		Z(1,2);Z(3,4);Z(5,7);Z(6,12);Z(8,11);Z(9,15);Z(10,13);Z(14,16);Z(17,18);Z(19,20);
		Z(2,3);Z(4,5);Z(7,12);Z(8,10);Z(9,14);Z(11,13);Z(16,17);Z(18,19);
		Z(4,6);Z(5,8);Z(9,11);Z(10,12);Z(13,16);Z(15,17);
		Z(3,4);Z(6,7);Z(9,10);Z(11,12);Z(14,15);Z(17,18);
		Z(5,6);Z(7,8);Z(10,11);Z(13,14);Z(15,16);
		Z(6,7);Z(8,9);Z(12,13);Z(14,15);
	  return;
	}
	case 23: // sort23() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,20);Z(1,12);Z(2,16);Z(4,6);Z(5,10);Z(7,21);Z(8,14);Z(9,15);Z(11,22);Z(13,18);Z(17,19);
		Z(0,3);Z(1,11);Z(2,7);Z(4,17);Z(5,13);Z(6,19);Z(8,9);Z(10,18);Z(12,22);Z(14,15);Z(16,21);
		Z(0,1);Z(2,4);Z(3,12);Z(5,8);Z(6,9);Z(7,10);Z(11,20);Z(13,16);Z(14,17);Z(15,18);Z(19,21);
		Z(2,5);Z(4,8);Z(6,11);Z(7,14);Z(9,16);Z(12,17);Z(15,19);Z(18,21);
		Z(1,8);Z(3,14);Z(4,7);Z(9,20);Z(10,12);Z(11,13);Z(15,22);Z(16,19);
		Z(0,7);Z(1,5);Z(3,4);Z(6,11);Z(8,15);Z(9,14);Z(10,13);Z(12,17);Z(18,22);Z(19,20);
		Z(0,2);Z(1,6);Z(4,7);Z(5,9);Z(8,10);Z(13,15);Z(14,18);Z(16,19);Z(17,22);Z(20,21);
		Z(2,3);Z(4,5);Z(6,8);Z(7,9);Z(10,11);Z(12,13);Z(14,16);Z(15,17);Z(18,19);Z(21,22);
		Z(1,2);Z(3,6);Z(4,10);Z(7,8);Z(9,11);Z(12,14);Z(13,19);Z(15,16);Z(17,20);
		Z(2,3);Z(5,10);Z(6,7);Z(8,9);Z(13,18);Z(14,15);Z(16,17);Z(20,21);
		Z(3,4);Z(5,7);Z(10,12);Z(11,13);Z(16,18);Z(19,20);
		Z(4,6);Z(8,10);Z(9,12);Z(11,14);Z(13,15);Z(17,19);
		Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);
	  return;
	}
	case 24: // sort24() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,20);Z(1,12);Z(2,16);Z(3,23);Z(4,6);Z(5,10);Z(7,21);Z(8,14);Z(9,15);Z(11,22);Z(13,18);Z(17,19);
		Z(0,3);Z(1,11);Z(2,7);Z(4,17);Z(5,13);Z(6,19);Z(8,9);Z(10,18);Z(12,22);Z(14,15);Z(16,21);Z(20,23);
		Z(0,1);Z(2,4);Z(3,12);Z(5,8);Z(6,9);Z(7,10);Z(11,20);Z(13,16);Z(14,17);Z(15,18);Z(19,21);Z(22,23);
		Z(2,5);Z(4,8);Z(6,11);Z(7,14);Z(9,16);Z(12,17);Z(15,19);Z(18,21);
		Z(1,8);Z(3,14);Z(4,7);Z(9,20);Z(10,12);Z(11,13);Z(15,22);Z(16,19);
		Z(0,7);Z(1,5);Z(3,4);Z(6,11);Z(8,15);Z(9,14);Z(10,13);Z(12,17);Z(16,23);Z(18,22);Z(19,20);
		Z(0,2);Z(1,6);Z(4,7);Z(5,9);Z(8,10);Z(13,15);Z(14,18);Z(16,19);Z(17,22);Z(21,23);
		Z(2,3);Z(4,5);Z(6,8);Z(7,9);Z(10,11);Z(12,13);Z(14,16);Z(15,17);Z(18,19);Z(20,21);
		Z(1,2);Z(3,6);Z(4,10);Z(7,8);Z(9,11);Z(12,14);Z(13,19);Z(15,16);Z(17,20);Z(21,22);
		Z(2,3);Z(5,10);Z(6,7);Z(8,9);Z(13,18);Z(14,15);Z(16,17);Z(20,21);
		Z(3,4);Z(5,7);Z(10,12);Z(11,13);Z(16,18);Z(19,20);
		Z(4,6);Z(8,10);Z(9,12);Z(11,14);Z(13,15);Z(17,19);
		Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);
	  return;
	}
	case 25: // sort25() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,2);Z(1,8);Z(3,18);Z(4,17);Z(5,20);Z(6,19);Z(7,9);Z(10,11);Z(12,13);Z(14,16);Z(15,22);Z(21,23);
		Z(0,3);Z(1,15);Z(2,18);Z(4,12);Z(5,21);Z(6,10);Z(7,14);Z(8,22);Z(9,16);Z(11,19);Z(13,17);Z(20,23);
		Z(0,4);Z(1,7);Z(2,13);Z(3,12);Z(5,6);Z(8,14);Z(9,15);Z(10,21);Z(11,20);Z(16,22);Z(17,18);Z(19,23);
		Z(0,5);Z(2,11);Z(3,6);Z(4,10);Z(7,16);Z(8,9);Z(12,21);Z(13,19);Z(14,15);Z(17,20);Z(18,23);
		Z(2,7);Z(6,9);Z(8,11);Z(14,24);Z(18,21);
		Z(3,8);Z(7,10);Z(11,12);Z(13,14);Z(15,21);Z(18,20);Z(22,24);
		Z(4,13);Z(10,16);Z(11,15);Z(18,24);Z(19,22);
		Z(1,4);Z(8,11);Z(9,19);Z(13,17);Z(14,18);Z(16,20);Z(23,24);
		Z(0,1);Z(4,5);Z(6,13);Z(9,14);Z(10,17);Z(12,16);Z(18,19);Z(20,21);Z(22,23);
		Z(2,6);Z(3,4);Z(5,13);Z(7,9);Z(12,18);Z(15,17);Z(16,19);Z(20,22);Z(21,23);
		Z(1,2);Z(5,8);Z(6,7);Z(9,10);Z(11,13);Z(14,15);Z(17,20);Z(21,22);
		Z(1,3);Z(2,4);Z(5,6);Z(7,11);Z(8,9);Z(10,13);Z(12,14);Z(15,16);Z(17,18);Z(19,20);
		Z(2,3);Z(4,8);Z(6,7);Z(9,12);Z(10,11);Z(13,14);Z(15,17);Z(16,18);Z(20,21);
		Z(3,5);Z(4,6);Z(7,8);Z(9,10);Z(11,12);Z(13,15);Z(14,17);Z(16,19);
		Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);Z(16,17);Z(18,19);
	  return;
	}
	case 26: // sort26() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,25);Z(1,3);Z(2,9);Z(4,19);Z(5,18);Z(6,21);Z(7,20);Z(8,10);Z(11,12);Z(13,14);Z(15,17);Z(16,23);Z(22,24);
		Z(1,4);Z(2,16);Z(3,19);Z(5,13);Z(6,22);Z(7,11);Z(8,15);Z(9,23);Z(10,17);Z(12,20);Z(14,18);Z(21,24);
		Z(1,5);Z(2,8);Z(3,14);Z(4,13);Z(6,7);Z(9,15);Z(10,16);Z(11,22);Z(12,21);Z(17,23);Z(18,19);Z(20,24);
		Z(0,10);Z(1,6);Z(3,7);Z(4,11);Z(5,12);Z(13,20);Z(14,21);Z(15,25);Z(18,22);Z(19,24);
		Z(0,4);Z(8,10);Z(12,13);Z(15,17);Z(21,25);
		Z(0,2);Z(4,8);Z(10,12);Z(13,15);Z(17,21);Z(23,25);
		Z(0,1);Z(2,3);Z(4,5);Z(8,14);Z(9,13);Z(11,17);Z(12,16);Z(20,21);Z(22,23);Z(24,25);
		Z(1,4);Z(3,10);Z(6,9);Z(7,13);Z(8,11);Z(12,18);Z(14,17);Z(15,22);Z(16,19);Z(21,24);
		Z(2,6);Z(3,8);Z(5,7);Z(9,12);Z(13,16);Z(17,22);Z(18,20);Z(19,23);
		Z(1,2);Z(4,6);Z(5,9);Z(7,10);Z(11,12);Z(13,14);Z(15,18);Z(16,20);Z(19,21);Z(23,24);
		Z(2,4);Z(3,5);Z(7,13);Z(8,9);Z(10,14);Z(11,15);Z(12,18);Z(16,17);Z(20,22);Z(21,23);
		Z(3,4);Z(6,9);Z(7,11);Z(10,12);Z(13,15);Z(14,18);Z(16,19);Z(21,22);
		Z(5,7);Z(6,8);Z(9,13);Z(10,11);Z(12,16);Z(14,15);Z(17,19);Z(18,20);
		Z(5,6);Z(7,8);Z(9,10);Z(11,13);Z(12,14);Z(15,16);Z(17,18);Z(19,20);
		Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);Z(16,17);Z(18,19);Z(20,21);
	  return;
	}
	case 27: // sort27() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,9);Z(1,6);Z(2,4);Z(3,7);Z(5,8);Z(11,24);Z(12,23);Z(13,26);Z(14,25);Z(15,19);Z(16,17);Z(18,22);Z(20,21);
		Z(0,1);Z(3,5);Z(4,10);Z(6,9);Z(7,8);Z(11,16);Z(12,18);Z(13,20);Z(14,15);Z(17,24);Z(19,25);Z(21,26);Z(22,23);
		Z(1,3);Z(2,5);Z(4,7);Z(8,10);Z(11,12);Z(13,14);Z(15,16);Z(17,19);Z(18,20);Z(21,22);Z(23,24);Z(25,26);
		Z(0,4);Z(1,2);Z(3,7);Z(5,9);Z(6,8);Z(11,13);Z(12,14);Z(15,21);Z(16,22);Z(17,18);Z(19,20);Z(23,25);Z(24,26);
		Z(0,1);Z(2,6);Z(4,5);Z(7,8);Z(9,10);Z(12,13);Z(14,23);Z(15,17);Z(16,18);Z(19,21);Z(20,22);Z(24,25);
		Z(0,11);Z(2,4);Z(3,6);Z(5,7);Z(8,9);Z(12,15);Z(13,17);Z(16,19);Z(18,21);Z(20,24);Z(22,25);
		Z(1,2);Z(3,4);Z(5,6);Z(7,8);Z(13,15);Z(14,17);Z(20,23);Z(22,24);
		Z(1,12);Z(2,3);Z(4,5);Z(6,7);Z(14,16);Z(17,19);Z(18,20);Z(21,23);
		Z(2,13);Z(14,15);Z(16,17);Z(18,19);Z(20,21);Z(22,23);
		Z(3,14);Z(4,15);Z(5,16);Z(10,21);Z(17,18);Z(19,20);
		Z(6,17);Z(7,18);Z(8,19);Z(9,20);Z(10,13);Z(14,22);Z(15,23);Z(16,24);
		Z(6,10);Z(7,14);Z(8,11);Z(9,12);Z(17,25);Z(18,26);Z(19,23);Z(20,24);
		Z(4,8);Z(5,9);Z(11,15);Z(12,16);Z(13,17);Z(18,22);Z(21,25);Z(24,26);
		Z(2,4);Z(3,5);Z(6,8);Z(7,9);Z(10,11);Z(12,14);Z(13,15);Z(16,18);Z(17,19);Z(20,22);Z(21,23);Z(25,26);
		Z(1,2);Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);Z(19,20);Z(21,22);Z(23,24);
	  return;
	}
	case 28: // sort28() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,9);Z(1,20);Z(2,21);Z(3,22);Z(4,19);Z(5,24);Z(6,25);Z(7,26);Z(8,23);Z(10,15);Z(11,13);Z(12,17);Z(14,16);Z(18,27);
		Z(0,18);Z(1,7);Z(2,6);Z(3,5);Z(4,8);Z(9,27);Z(10,12);Z(11,14);Z(13,16);Z(15,17);Z(19,23);Z(20,26);Z(21,25);Z(22,24);
		Z(1,2);Z(3,4);Z(5,19);Z(6,20);Z(7,21);Z(8,22);Z(9,18);Z(10,11);Z(12,14);Z(13,15);Z(16,17);Z(23,24);Z(25,26);
		Z(0,3);Z(1,10);Z(5,8);Z(6,7);Z(11,13);Z(14,16);Z(17,26);Z(19,22);Z(20,21);Z(24,27);
		Z(0,1);Z(2,7);Z(3,10);Z(4,8);Z(12,13);Z(14,15);Z(17,24);Z(19,23);Z(20,25);Z(26,27);
		Z(1,3);Z(2,6);Z(4,5);Z(7,19);Z(8,20);Z(11,12);Z(13,14);Z(15,16);Z(21,25);Z(22,23);Z(24,26);
		Z(2,4);Z(5,12);Z(7,8);Z(9,11);Z(10,14);Z(13,17);Z(15,22);Z(16,18);Z(19,20);Z(23,25);
		Z(2,9);Z(4,11);Z(5,6);Z(7,13);Z(8,10);Z(14,20);Z(16,23);Z(17,19);Z(18,25);Z(21,22);
		Z(1,2);Z(3,16);Z(4,9);Z(6,12);Z(10,14);Z(11,24);Z(13,17);Z(15,21);Z(18,23);Z(25,26);
		Z(2,8);Z(3,5);Z(4,7);Z(6,16);Z(9,15);Z(11,21);Z(12,18);Z(19,25);Z(20,23);Z(22,24);
		Z(2,3);Z(5,8);Z(7,9);Z(11,15);Z(12,16);Z(18,20);Z(19,22);Z(24,25);
		Z(6,8);Z(10,12);Z(11,13);Z(14,16);Z(15,17);Z(19,21);
		Z(5,6);Z(8,10);Z(9,11);Z(12,13);Z(14,15);Z(16,18);Z(17,19);Z(21,22);
		Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,14);Z(13,15);Z(16,17);Z(18,19);Z(20,21);Z(22,23);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);Z(19,20);Z(21,22);Z(23,24);
	  return;
	}
	case 29: // sort29() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,12);Z(1,10);Z(2,9);Z(3,7);Z(5,11);Z(6,8);Z(13,26);Z(14,25);Z(15,28);Z(16,27);Z(17,21);Z(18,19);Z(20,24);Z(22,23);
		Z(1,6);Z(2,3);Z(4,11);Z(7,9);Z(8,10);Z(13,18);Z(14,20);Z(15,22);Z(16,17);Z(19,26);Z(21,27);Z(23,28);Z(24,25);
		Z(0,4);Z(1,2);Z(3,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);Z(19,21);Z(20,22);Z(23,24);Z(25,26);Z(27,28);
		Z(4,6);Z(5,9);Z(8,11);Z(10,12);Z(13,15);Z(14,16);Z(17,23);Z(18,24);Z(19,20);Z(21,22);Z(25,27);Z(26,28);
		Z(0,5);Z(3,8);Z(4,7);Z(6,11);Z(9,10);Z(14,15);Z(16,25);Z(17,19);Z(18,20);Z(21,23);Z(22,24);Z(26,27);
		Z(0,1);Z(2,5);Z(6,9);Z(7,8);Z(10,11);Z(14,17);Z(15,19);Z(18,21);Z(20,23);Z(22,26);Z(24,27);
		Z(0,13);Z(1,3);Z(2,4);Z(5,6);Z(9,10);Z(15,17);Z(16,19);Z(22,25);Z(24,26);
		Z(1,2);Z(3,4);Z(5,7);Z(6,8);Z(16,18);Z(19,21);Z(20,22);Z(23,25);
		Z(1,14);Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(16,17);Z(18,19);Z(20,21);Z(22,23);Z(24,25);
		Z(2,15);Z(3,4);Z(5,6);Z(10,23);Z(11,24);Z(12,25);Z(19,20);Z(21,22);
		Z(3,16);Z(4,17);Z(5,18);Z(6,19);Z(7,20);Z(8,21);Z(9,22);Z(10,15);
		Z(6,10);Z(8,13);Z(9,14);Z(11,16);Z(12,17);Z(18,26);Z(19,27);Z(20,28);
		Z(4,8);Z(5,9);Z(7,11);Z(12,13);Z(14,18);Z(15,19);Z(16,20);Z(17,21);Z(22,26);Z(23,27);Z(24,28);
		Z(2,4);Z(3,5);Z(6,8);Z(7,9);Z(10,12);Z(11,14);Z(13,15);Z(16,18);Z(17,19);Z(20,22);Z(21,23);Z(24,26);Z(25,27);
		Z(1,2);Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);Z(19,20);Z(21,22);Z(23,24);Z(25,26);Z(27,28);
	  return;
	}
	case 30: // sort30() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(1,2);Z(3,10);Z(4,14);Z(5,8);Z(6,13);Z(7,12);Z(9,11);Z(16,17);Z(18,25);Z(19,29);Z(20,23);Z(21,28);Z(22,27);Z(24,26);
		Z(0,14);Z(1,5);Z(2,8);Z(3,7);Z(6,9);Z(10,12);Z(11,13);Z(15,29);Z(16,20);Z(17,23);Z(18,22);Z(21,24);Z(25,27);Z(26,28);
		Z(0,7);Z(1,6);Z(2,9);Z(4,10);Z(5,11);Z(8,13);Z(12,14);Z(15,22);Z(16,21);Z(17,24);Z(19,25);Z(20,26);Z(23,28);Z(27,29);
		Z(0,6);Z(2,4);Z(3,5);Z(7,11);Z(8,10);Z(9,12);Z(13,14);Z(15,21);Z(17,19);Z(18,20);Z(22,26);Z(23,25);Z(24,27);Z(28,29);
		Z(0,3);Z(1,2);Z(4,7);Z(5,9);Z(6,8);Z(10,11);Z(12,13);Z(14,29);Z(15,18);Z(16,17);Z(19,22);Z(20,24);Z(21,23);Z(25,26);Z(27,28);
		Z(0,1);Z(2,3);Z(4,6);Z(7,9);Z(10,12);Z(11,13);Z(15,16);Z(17,18);Z(19,21);Z(22,24);Z(25,27);Z(26,28);
		Z(0,15);Z(1,2);Z(3,5);Z(8,10);Z(11,12);Z(13,28);Z(16,17);Z(18,20);Z(23,25);Z(26,27);
		Z(1,16);Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(12,27);Z(18,19);Z(20,21);Z(22,23);Z(24,25);
		Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(17,18);Z(19,20);Z(21,22);Z(23,24);Z(25,26);
		Z(2,17);Z(3,18);Z(4,19);Z(5,6);Z(7,8);Z(9,24);Z(10,25);Z(11,26);Z(20,21);Z(22,23);
		Z(5,20);Z(6,21);Z(7,22);Z(8,23);Z(9,16);Z(10,17);Z(11,18);Z(12,19);
		Z(5,9);Z(6,10);Z(7,11);Z(8,15);Z(13,20);Z(14,21);Z(18,22);Z(19,23);
		Z(3,5);Z(4,8);Z(7,9);Z(12,15);Z(13,16);Z(14,17);Z(20,24);Z(21,25);
		Z(2,4);Z(6,8);Z(10,12);Z(11,13);Z(14,15);Z(16,18);Z(17,19);Z(20,22);Z(21,23);Z(24,26);Z(25,27);
		Z(1,2);Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);Z(19,20);Z(21,22);Z(23,24);Z(25,26);Z(27,28);
	  return;
	}
	case 31: // sort31() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,1);Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);Z(16,17);Z(18,19);Z(20,21);Z(22,23);Z(24,25);Z(26,27);Z(28,29);
		Z(0,2);Z(1,3);Z(4,6);Z(5,7);Z(8,10);Z(9,11);Z(12,14);Z(13,15);Z(16,18);Z(17,19);Z(20,22);Z(21,23);Z(24,26);Z(25,27);Z(28,30);
		Z(0,4);Z(1,5);Z(2,6);Z(3,7);Z(8,12);Z(9,13);Z(10,14);Z(11,15);Z(16,20);Z(17,21);Z(18,22);Z(19,23);Z(24,28);Z(25,29);Z(26,30);
		Z(0,8);Z(1,9);Z(2,10);Z(3,11);Z(4,12);Z(5,13);Z(6,14);Z(7,15);Z(16,24);Z(17,25);Z(18,26);Z(19,27);Z(20,28);Z(21,29);Z(22,30);
		Z(0,16);Z(1,8);Z(2,4);Z(3,12);Z(5,10);Z(6,9);Z(7,14);Z(11,13);Z(17,24);Z(18,20);Z(19,28);Z(21,26);Z(22,25);Z(23,30);Z(27,29);
		Z(1,2);Z(3,5);Z(4,8);Z(6,22);Z(7,11);Z(9,25);Z(10,12);Z(13,14);Z(17,18);Z(19,21);Z(20,24);Z(23,27);Z(26,28);Z(29,30);
		Z(1,17);Z(2,18);Z(3,19);Z(4,20);Z(5,10);Z(7,23);Z(8,24);Z(11,27);Z(12,28);Z(13,29);Z(14,30);Z(21,26);
		Z(3,17);Z(4,16);Z(5,21);Z(6,18);Z(7,9);Z(8,20);Z(10,26);Z(11,23);Z(13,25);Z(14,28);Z(15,27);Z(22,24);
		Z(1,4);Z(3,8);Z(5,16);Z(7,17);Z(9,21);Z(10,22);Z(11,19);Z(12,20);Z(14,24);Z(15,26);Z(23,28);Z(27,30);
		Z(2,5);Z(7,8);Z(9,18);Z(11,17);Z(12,16);Z(13,22);Z(14,20);Z(15,19);Z(23,24);Z(26,29);
		Z(2,4);Z(6,12);Z(9,16);Z(10,11);Z(13,17);Z(14,18);Z(15,22);Z(19,25);Z(20,21);Z(27,29);
		Z(5,6);Z(8,12);Z(9,10);Z(11,13);Z(14,16);Z(15,17);Z(18,20);Z(19,23);Z(21,22);Z(25,26);
		Z(3,5);Z(6,7);Z(8,9);Z(10,12);Z(11,14);Z(13,16);Z(15,18);Z(17,20);Z(19,21);Z(22,23);Z(24,25);Z(26,28);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);Z(19,20);Z(21,22);Z(23,24);Z(25,26);Z(27,28);
	  return;
	}
	case 32: // sort32() from http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
	{   Z(0,1);Z(2,3);Z(4,5);Z(6,7);Z(8,9);Z(10,11);Z(12,13);Z(14,15);Z(16,17);Z(18,19);Z(20,21);Z(22,23);Z(24,25);Z(26,27);Z(28,29);Z(30,31);
		Z(0,2);Z(1,3);Z(4,6);Z(5,7);Z(8,10);Z(9,11);Z(12,14);Z(13,15);Z(16,18);Z(17,19);Z(20,22);Z(21,23);Z(24,26);Z(25,27);Z(28,30);Z(29,31);
		Z(0,4);Z(1,5);Z(2,6);Z(3,7);Z(8,12);Z(9,13);Z(10,14);Z(11,15);Z(16,20);Z(17,21);Z(18,22);Z(19,23);Z(24,28);Z(25,29);Z(26,30);Z(27,31);
		Z(0,8);Z(1,9);Z(2,10);Z(3,11);Z(4,12);Z(5,13);Z(6,14);Z(7,15);Z(16,24);Z(17,25);Z(18,26);Z(19,27);Z(20,28);Z(21,29);Z(22,30);Z(23,31);
		Z(0,16);Z(1,8);Z(2,4);Z(3,12);Z(5,10);Z(6,9);Z(7,14);Z(11,13);Z(15,31);Z(17,24);Z(18,20);Z(19,28);Z(21,26);Z(22,25);Z(23,30);Z(27,29);
		Z(1,2);Z(3,5);Z(4,8);Z(6,22);Z(7,11);Z(9,25);Z(10,12);Z(13,14);Z(17,18);Z(19,21);Z(20,24);Z(23,27);Z(26,28);Z(29,30);
		Z(1,17);Z(2,18);Z(3,19);Z(4,20);Z(5,10);Z(7,23);Z(8,24);Z(11,27);Z(12,28);Z(13,29);Z(14,30);Z(21,26);
		Z(3,17);Z(4,16);Z(5,21);Z(6,18);Z(7,9);Z(8,20);Z(10,26);Z(11,23);Z(13,25);Z(14,28);Z(15,27);Z(22,24);
		Z(1,4);Z(3,8);Z(5,16);Z(7,17);Z(9,21);Z(10,22);Z(11,19);Z(12,20);Z(14,24);Z(15,26);Z(23,28);Z(27,30);
		Z(2,5);Z(7,8);Z(9,18);Z(11,17);Z(12,16);Z(13,22);Z(14,20);Z(15,19);Z(23,24);Z(26,29);
		Z(2,4);Z(6,12);Z(9,16);Z(10,11);Z(13,17);Z(14,18);Z(15,22);Z(19,25);Z(20,21);Z(27,29);
		Z(5,6);Z(8,12);Z(9,10);Z(11,13);Z(14,16);Z(15,17);Z(18,20);Z(19,23);Z(21,22);Z(25,26);
		Z(3,5);Z(6,7);Z(8,9);Z(10,12);Z(11,14);Z(13,16);Z(15,18);Z(17,20);Z(19,21);Z(22,23);Z(24,25);Z(26,28);
		Z(3,4);Z(5,6);Z(7,8);Z(9,10);Z(11,12);Z(13,14);Z(15,16);Z(17,18);Z(19,20);Z(21,22);Z(23,24);Z(25,26);Z(27,28);
	  return;
	}
   } // end of switch for optimal sort
 }
 #undef Z

#endif
